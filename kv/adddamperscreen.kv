#:import toast kivymd.toast.kivytoast.toast
#:import get_color_from_hex kivy.utils.get_color_from_hex
#:import get_hex_from_color kivy.utils.get_hex_from_color
#:import date datetime.date

<AddDamperScreen>:
    tf_number: tf_number
    dditm_type: dditm_type
    lbl_choose_date: lbl_choose_date
    tf_location: tf_location
    chbx_isreleased: chbx_isreleased
    # My my_font_size variable.
    my_font_size: dp(25)

    BoxLayout:
        orientation: "vertical"
        AddEditToolbar:
            id: tb_addedit
            toolbar_title: app.tr._("Add damper")
        GridLayout:
            cols: 1
            padding: dp(7)
            spacing: dp(15)
            MDTextField:
                id: tf_number
                hint_text: app.tr._("Number of damper")
                required: True
                helper_text: app.tr._("Can't be empty")
                helper_text_mode: "on_error"
                font_size: root.my_font_size
            BoxLayout:
                size_hint_y: .1
                MDLabel:
                    size_hint_x: None
                    width: dp(100)
                    text: app.tr._("Type:")
                    font_size: root.my_font_size - 5
                MDDropDownItem:
                    id: dditm_type
                    dropdown_bg: [1, 1, 1, 1]
                    on_release: root.menu.open() if root.menu else toast(app.tr._("Add types"))
            ChooseDate:
                canvas.before:
                    Color:
                        rgba: get_color_from_hex("#FFFFFF") if self.state == "normal" else get_color_from_hex(get_hex_from_color(app.theme_cls.primary_color))  # app.theme_cls.primary_color
                    Rectangle:
                        pos: self.pos
                        size: self.size
                id: lbl_choose_date
                text: "[u]{}[/u]".format(date.today())
                markup: True
                size_hint: .1, .4
                font_size: root.my_font_size - 5
                on_release: root.show_datepicker()
            MDTextField:
                id: tf_location
                hint_text: app.tr._("Location")
                required: True
                helper_text: app.tr._("Can't be empty")
                helper_text_mode: "on_error"
                font_size: root.my_font_size
            BoxLayout:
                size_hint_y: .1
                MDLabel:
                    text: app.tr._("Is released:")
                    size_hint_x: None
                    width: dp(150)
                    font_size: root.my_font_size - 5
                MDCheckbox:
                    id: chbx_isreleased
                    size_hint_x: None
                    width: dp(50)
            MDTextField:
                id: tf_notes
                hint_text: app.tr._("Notes")
                font_size: root.my_font_size
            FloatLayout:
                MDRaisedButton:
                    pos_hint: {"center_x": .5, "top": 1}
                    text: app.tr._("Add")
                    size_hint: .8, .4
                    on_release:
                        root.add_damper(tf_number.text.strip().replace(" ", ""), dditm_type.text, lbl_choose_date.text, tf_location.text.strip().replace(" ", ""), chbx_isreleased.active, tf_notes.text.strip())
